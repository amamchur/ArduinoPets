#include "MCURDK.h"
#include "Board/Auto.hpp"
#include "Utils/ToolSet.hpp"
#include "Utils/MillisecondsCounter.hpp"
#include "IC/ST7920.hpp"

using namespace MCURDK;
using namespace MCURDK::Board;
using namespace MCURDK::IO;
using namespace MCURDK::Data;
using namespace MCURDK::GPIO;

typedef uint32_t CounterType;
typedef MCURDK::Utils::MillisecondsCounter<CounterType, &timer0_millis> Counter;
typedef MCURDK::Utils::ToolSet<Counter> Tools;
typedef Tools::Delay Delay;
typedef Tools::FunctionTimeout<16, int16_t> Timeout;

typedef MCURDK::IC::ST7920InterfaceSPI<HardwareSPI1, BD10, Delay> ST7920Interface;
typedef MCURDK::IC::ST7920AddressSelector<16, 4> AddressSelector;
typedef MCURDK::IC::ST7920<ST7920Interface, AddressSelector> ST7920;
ST7920 st7920;

const unsigned char graphic [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x03, 0xc0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x03, 0xc0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x03, 0xc0, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x03, 0xc0, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe0, 0x03, 0xc0, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0x03, 0xc0, 0x0f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf8, 0x03, 0xc0, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xd8, 0x03, 0xc0, 0x1b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xcc, 0x01, 0x80, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xcc, 0x01, 0x80, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc6, 0x01, 0x80, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc6, 0x01, 0x80, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc6, 0x01, 0x80, 0x63, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0x01, 0x80, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0x01, 0x80, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0x01, 0x80, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0x81, 0x81, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x81, 0x81, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x81, 0x81, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x81, 0x81, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x81, 0x81, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x83, 0xc1, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x83, 0xc1, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc1, 0x83, 0xc1, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0x83, 0xc1, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc7, 0x87, 0xe1, 0xe3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xce, 0x06, 0x60, 0x73, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xcc, 0x06, 0x60, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfc, 0x0e, 0x70, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfc, 0x0c, 0x30, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xcc, 0x1c, 0x38, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xce, 0x18, 0x18, 0x73, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc7, 0xf8, 0x1f, 0xe3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc3, 0xfc, 0x3f, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x7e, 0x7e, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x67, 0xe6, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x63, 0xc6, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x61, 0x86, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x61, 0x86, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x61, 0x86, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x61, 0x86, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x71, 0x8e, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x31, 0x8c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x39, 0x9c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x19, 0x98, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0f, 0xf0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x07, 0xe0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

typedef ST7920::FillIter<0xAA> FI;

class Chess1x1Iter {
  public:
    Chess1x1Iter() : index(0) {
    }

    Chess1x1Iter& operator++() {
      index++;
      return *this;
    }

    uint8_t operator*() {
      uint8_t row = index / 16;
      return row & 1 ? 0xAA : 0x55;
    }
  private:
    uint16_t index;
};

class Chess8x8Iter {
  public:
    Chess8x8Iter() : index(0) {
    }

    Chess8x8Iter& operator++() {
      index++;
      return *this;
    }

    uint8_t operator*() {
      uint8_t row = index / 16;
      uint8_t column = index % 16;
      uint8_t p = 0;
      p += (row & 8) == 0 ? 0 : 1;
      p += (column & 1) == 0 ? 0 : 1;
      return (p & 1) ? 0xFF : 0x00;
    }
  private:
    uint16_t index;
};

class Chess16x16Iter {
  public:
    Chess16x16Iter() : index(0) {
    }

    Chess16x16Iter& operator++() {
      index++;
      return *this;
    }

    uint8_t operator*() {
      uint8_t row = index / 16;
      uint8_t column = index % 16;
      uint8_t p = 0;
      p += (row & 16) == 0 ? 0 : 1;
      p += (column & 2) == 0 ? 0 : 1;
      return (p & 1) ? 0xFF : 0x00;
    }
  private:
    uint16_t index;
};

class Chess32x32Iter {
  public:
    Chess32x32Iter() : index(0) {
    }

    Chess32x32Iter& operator++() {
      index++;
      return *this;
    }

    uint8_t operator*() {
      uint8_t row = index / 16;
      uint8_t column = index % 16;
      uint8_t p = 0;
      p += (row & 32) == 0 ? 0 : 1;
      p += (column & 4) == 0 ? 0 : 1;
      return (p & 1) ? 0xFF : 0x00;
    }
  private:
    uint16_t index;
};

void setup(void) {
  st7920.begin();
  st7920.home();
  st7920.entryMode();
  st7920.extendedMode();
  st7920.graphicMode();
  st7920.screenClear();
}

void loop(void) {
  st7920.screenFill(graphic);
  delay(3000);
  st7920.screenFill(Chess1x1Iter());
  delay(3000);
  st7920.screenFill(Chess8x8Iter());
  delay(3000);
  st7920.screenFill(Chess16x16Iter());
  delay(3000);
  st7920.screenFill(Chess32x32Iter());
  delay(3000);
}

